// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EkkoClient is the client API for Ekko service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EkkoClient interface {
	UnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error)
	ServerStreamingEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (Ekko_ServerStreamingEchoClient, error)
	ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (Ekko_ClientStreamingEchoClient, error)
	BidirectionalStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (Ekko_BidirectionalStreamingEchoClient, error)
}

type ekkoClient struct {
	cc grpc.ClientConnInterface
}

func NewEkkoClient(cc grpc.ClientConnInterface) EkkoClient {
	return &ekkoClient{cc}
}

func (c *ekkoClient) UnaryEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoResponse, error) {
	out := new(EchoResponse)
	err := c.cc.Invoke(ctx, "/ekko.Ekko/UnaryEcho", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ekkoClient) ServerStreamingEcho(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (Ekko_ServerStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ekko_ServiceDesc.Streams[0], "/ekko.Ekko/ServerStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &ekkoServerStreamingEchoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ekko_ServerStreamingEchoClient interface {
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type ekkoServerStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *ekkoServerStreamingEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ekkoClient) ClientStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (Ekko_ClientStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ekko_ServiceDesc.Streams[1], "/ekko.Ekko/ClientStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &ekkoClientStreamingEchoClient{stream}
	return x, nil
}

type Ekko_ClientStreamingEchoClient interface {
	Send(*EchoRequest) error
	CloseAndRecv() (*EchoResponse, error)
	grpc.ClientStream
}

type ekkoClientStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *ekkoClientStreamingEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ekkoClientStreamingEchoClient) CloseAndRecv() (*EchoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ekkoClient) BidirectionalStreamingEcho(ctx context.Context, opts ...grpc.CallOption) (Ekko_BidirectionalStreamingEchoClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ekko_ServiceDesc.Streams[2], "/ekko.Ekko/BidirectionalStreamingEcho", opts...)
	if err != nil {
		return nil, err
	}
	x := &ekkoBidirectionalStreamingEchoClient{stream}
	return x, nil
}

type Ekko_BidirectionalStreamingEchoClient interface {
	Send(*EchoRequest) error
	Recv() (*EchoResponse, error)
	grpc.ClientStream
}

type ekkoBidirectionalStreamingEchoClient struct {
	grpc.ClientStream
}

func (x *ekkoBidirectionalStreamingEchoClient) Send(m *EchoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ekkoBidirectionalStreamingEchoClient) Recv() (*EchoResponse, error) {
	m := new(EchoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EkkoServer is the server API for Ekko service.
// All implementations must embed UnimplementedEkkoServer
// for forward compatibility
type EkkoServer interface {
	UnaryEcho(context.Context, *EchoRequest) (*EchoResponse, error)
	ServerStreamingEcho(*EchoRequest, Ekko_ServerStreamingEchoServer) error
	ClientStreamingEcho(Ekko_ClientStreamingEchoServer) error
	BidirectionalStreamingEcho(Ekko_BidirectionalStreamingEchoServer) error
	mustEmbedUnimplementedEkkoServer()
}

// UnimplementedEkkoServer must be embedded to have forward compatible implementations.
type UnimplementedEkkoServer struct {
}

func (UnimplementedEkkoServer) UnaryEcho(context.Context, *EchoRequest) (*EchoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryEcho not implemented")
}
func (UnimplementedEkkoServer) ServerStreamingEcho(*EchoRequest, Ekko_ServerStreamingEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStreamingEcho not implemented")
}
func (UnimplementedEkkoServer) ClientStreamingEcho(Ekko_ClientStreamingEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStreamingEcho not implemented")
}
func (UnimplementedEkkoServer) BidirectionalStreamingEcho(Ekko_BidirectionalStreamingEchoServer) error {
	return status.Errorf(codes.Unimplemented, "method BidirectionalStreamingEcho not implemented")
}
func (UnimplementedEkkoServer) mustEmbedUnimplementedEkkoServer() {}

// UnsafeEkkoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EkkoServer will
// result in compilation errors.
type UnsafeEkkoServer interface {
	mustEmbedUnimplementedEkkoServer()
}

func RegisterEkkoServer(s grpc.ServiceRegistrar, srv EkkoServer) {
	s.RegisterService(&Ekko_ServiceDesc, srv)
}

func _Ekko_UnaryEcho_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EkkoServer).UnaryEcho(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ekko.Ekko/UnaryEcho",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EkkoServer).UnaryEcho(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ekko_ServerStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EchoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EkkoServer).ServerStreamingEcho(m, &ekkoServerStreamingEchoServer{stream})
}

type Ekko_ServerStreamingEchoServer interface {
	Send(*EchoResponse) error
	grpc.ServerStream
}

type ekkoServerStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *ekkoServerStreamingEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _Ekko_ClientStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EkkoServer).ClientStreamingEcho(&ekkoClientStreamingEchoServer{stream})
}

type Ekko_ClientStreamingEchoServer interface {
	SendAndClose(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type ekkoClientStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *ekkoClientStreamingEchoServer) SendAndClose(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ekkoClientStreamingEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Ekko_BidirectionalStreamingEcho_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EkkoServer).BidirectionalStreamingEcho(&ekkoBidirectionalStreamingEchoServer{stream})
}

type Ekko_BidirectionalStreamingEchoServer interface {
	Send(*EchoResponse) error
	Recv() (*EchoRequest, error)
	grpc.ServerStream
}

type ekkoBidirectionalStreamingEchoServer struct {
	grpc.ServerStream
}

func (x *ekkoBidirectionalStreamingEchoServer) Send(m *EchoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ekkoBidirectionalStreamingEchoServer) Recv() (*EchoRequest, error) {
	m := new(EchoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Ekko_ServiceDesc is the grpc.ServiceDesc for Ekko service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ekko_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ekko.Ekko",
	HandlerType: (*EkkoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryEcho",
			Handler:    _Ekko_UnaryEcho_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ServerStreamingEcho",
			Handler:       _Ekko_ServerStreamingEcho_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ClientStreamingEcho",
			Handler:       _Ekko_ClientStreamingEcho_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidirectionalStreamingEcho",
			Handler:       _Ekko_BidirectionalStreamingEcho_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/ekko.proto",
}
